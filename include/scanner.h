#ifndef clox_scanner_h
#define clox_scanner_h

typedef enum{
	//one character tokens
	TOKEN_LEFT_PAREN,TOKEN_RIGHT_PAREN,
	TOKEN_LEFT_BRACE,TOKEN_RIGHT_BRACE,
	TOKEN_LEFT_SQ_PAR,TOKEN_RIGHT_SQ_PAR,
	TOKEN_COMMA,TOKEN_DOT,TOKEN_MINUS,TOKEN_PLUS,
	TOKEN_SEMICOLON,TOKEN_SLASH,TOKEN_STAR,TOKEN_POWER,
	TOKEN_PERCENT,TOKEN_CHAR,TOKEN_COLON,
	//ONE OR TWO CHARACTER TOKENS
	TOKEN_EXCL,TOKEN_EXCL_EQUAL,
	TOKEN_EQUAL,TOKEN_EQUAL_EQUAL,
	TOKEN_GREATER,TOKEN_GREATER_EQUAL,
	TOKEN_LESS,TOKEN_LESS_EQUAL,
	TOKEN_PLUS_PLUS,TOKEN_MINUS_MINUS,
	TOKEN_PLUS_EQUALS,
	TOKEN_MINUS_EQUALS,
	TOKEN_STAR_EQUALS,
	TOKEN_SLASH_EQUALS,
	TOKEN_POWER_EQUALS,
	TOKEN_PERCENT_EQUALS,
	//LITERALS
	TOKEN_IDENTIFIER,TOKEN_STRING,TOKEN_NUMBER,TOKEN_SYN_NUMBER,
	TOKEN_NUMBER_BIN,TOKEN_NUMBER_OCT,
	TOKEN_NUMBER_HEX,
	//KEYWORDS
	TOKEN_AND,TOKEN_CLASS,TOKEN_ELSE,TOKEN_FALSE,
	TOKEN_FOR,TOKEN_FUN,TOKEN_IF,TOKEN_NIL,TOKEN_OR,
	TOKEN_PRINT,TOKEN_RETURN,TOKEN_SUPER,TOKEN_THIS,
	TOKEN_TRUE,TOKEN_VAR,TOKEN_WHILE,TOKEN_MOD,TOKEN_INST_OF,
	TOKEN_OPERATOR,
	TOKEN_CONST,TOKEN_CONST_IDENTIFIER,
	TOKEN_BREAK,TOKEN_CONTINUE,TOKEN_USING,
	
	TOKEN_ERROR,TOKEN_EOF,
	TOKEN_IMAG_NUMBER,
	//TOKEN_LEFT_SQUARE,TOKEN_RIGHT_SQUARE
}TokenType;

typedef struct{
	TokenType type;
	const char* start;
	int length;
	int line;
}Token;


void initScanner(const char* source);
Token scanToken();

#endif
