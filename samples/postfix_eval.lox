/* clox program to print postfix notation and evaluate it*/
var stack_top=-1;
var stack=list(10);
fun push(x){
	++stack_top;
	stack[stack_top]=x;
}
fun pop(){
	var top=stack[stack_top];
	stack[stack_top]=nil;
	--stack_top;
	return top;
}
fun precedence(x){
	if(x=='+' or x=='-') return 1;
	else if(x=='*' or x=='/') return 2;
	else if(x=='^') return 3;
	else if(x=='~') return 4;
	else return -1;
}
fun isNumber(x){
	if(x=='0' or
		x=='1' or x=='2' or
		x=='3' or x=='4' or
		x=='5' or x=='6' or x=='7' or x=='8' or x=='9') return true;
		else return false;
}
fun isOperator(x){
	return x=='+' or x=='-' or x=='*' or x=='/' or x=='~' or x=='^';
}
fun isLeftAss(x){
	if(x=='+' or x=='-' or x=='*' or x=='/' or x=='~') return true;
	else return false;
}
fun isDot(x){ return x=='.';}
fun tokenize(expression){
	//lox function that takes an expression and tokenizes it based on the 
	//precedence of operators
	var exp_len=len(expression);
	var token_list=list(exp_len);
	var buf_index=0;
	var index=0;
	var token="";
	var lexeme=nil;
	while(index<exp_len)
{
	lexeme=expression[index];
	token="";
	if(isNumber(lexeme)){
		token=token+lexeme;
		++index;
		while(isNumber(expression[index]) or isDot(expression[index])){
			token=token+expression[index];
			++index;
		}
		token_list[buf_index]=token;
		++buf_index;
		index=index-1;
	}else if(lexeme=='('){
		push('(');
	}else if(lexeme==')'){
		var e=pop();
		while(e!='('){
			token_list[buf_index]=e;
			e=pop();
			++buf_index;
		}
	}else if(isOperator(expression[index])){
		lexeme=expression[index];
		if(stack_top==-1){	push(lexeme);}
		else{
		var tos=stack[stack_top];
		if(precedence(tos)>precedence(lexeme) or (precedence(tos)==precedence(lexeme) and !isLeftAss(lexeme))){
			var op=pop();
			token_list[buf_index]=op;
			++buf_index;
			push(lexeme);
			}else{
			push(lexeme);
			}
		}
	}
	++index;
	}
	while(stack_top!=-1){ token_list[buf_index]=pop();++buf_index;}
	return token_list;
}
fun operate(x,y,op){
	if(op=='+') return x+y;
	else if(op=='-') return x-y;
	else if(op=='*') return x*y;
	else if(op=='/') return x/y;
	else return nil;
}
fun negate(x){
	return -x;
}
fun isUnary(op){
	return op=='~';
}
fun evaluate(token_list){
	if(!isList(token_list)){
		print "Required token list for evaluation";
		return;
	}else{
	var index=0;
	stack_top=-1;
	var token="";
	while(token!=nil){
		token=token_list[index];
		if(!isOperator(token)){
		push(token);
		}else if(isUnary(token)){
			push(negate(num(pop())));
		}else{
		var op2=num(pop());
			var op1=num(pop());
			push(operate(op1,op2,token));
		}
		++index;
	}
	pop();
	return pop();
	}
}
prec(4);
var expression=input("Enter a expression:");
var tokenl=tokenize(expression);
print "Postfix form:";
print tokenl;
print evaluate(tokenl);
